from nicegui import app, run, ui
from db_helper import SQLiteHelper
import os
import sqlite3
from datetime import datetime
import serial
from queue import Queue
import smtplib
from email.message import EmailMessage
import ssl
from RFID import RFID
from time import sleep
import asyncio
import logging

# define global variables
app_path = os.path.dirname(__file__)
dataQueue = Queue()
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)
ui.colors(primary="#495746", secondary="#495746", info="#495746")

db = SQLiteHelper("animalTracker.db")

def def_serialport():
    try:
        ser = serial.Serial('/dev/serial0', baudrate=9600, timeout=1)
        return ser
    except:
        ser = None
        logger.error(str(datetime.now()) + " : " + "Keinen seriellen Port gefunden")
        return ser

ser = def_serialport()

logo = '''
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" height="80" width="80" viewBox="20 300 1500 1000">
<path d="M0 0 C0.74644775 0.00093658 1.49289551 0.00187317 2.26196289 0.00283813 C30.72171813 0.07993499 58.14788395 4.86952881 85.375 13.1875 C86.21192383 13.44225098 87.04884766 13.69700195 87.91113281 13.95947266 C117.07353965 23.03361212 144.61106183 39.15285754 168.375 58.1875 C169.75488165 59.26994783 171.13509907 60.35196774 172.515625 61.43359375 C184.33369127 70.77372281 194.53405206 80.73861565 203.69140625 92.72265625 C206.14806269 95.92949081 208.74263344 98.99764351 211.375 102.0625 C215.20670794 106.61075555 218.61256469 111.32145566 221.9375 116.25 C228.7099791 126.279428 236.44579336 135.3608875 244.41943359 144.44750977 C246.74300831 147.10391295 249.03889012 149.75919363 251.21826172 152.53637695 C258.28814564 161.50852828 266.37134368 169.37229097 274.5 177.375 C276.65211532 179.49926327 278.8026327 181.62508564 280.95016479 183.75398254 C282.27520516 185.06700567 283.60290427 186.3773539 284.93386841 187.68437195 C288.71878529 191.42883796 292.27069609 195.3057287 295.74923706 199.33564758 C297.93963193 201.83065343 300.2615767 204.16920065 302.625 206.5 C303.31770996 207.18703003 303.31770996 207.18703003 304.02441406 207.88793945 C305.47212722 209.32366175 306.92308857 210.75602432 308.375 212.1875 C313.97245182 217.70616731 319.49628282 223.22177051 324.609375 229.19921875 C328.17280799 233.21202272 332.05169616 236.9245959 335.875 240.6875 C341.05672827 245.78736842 346.10118843 250.90983391 350.83789062 256.42773438 C352.90741947 258.7970425 355.12176477 260.99356044 357.375 263.1875 C361.59161447 267.36606983 365.53475305 271.66489512 369.375 276.1875 C370.18453125 277.10789062 370.9940625 278.02828125 371.828125 278.9765625 C391.76761469 301.80704242 407.80293884 328.25019086 417.6875 356.9375 C417.98873779 357.79102051 418.28997559 358.64454102 418.6003418 359.52392578 C419.64777957 362.72124613 420.52653278 365.93103554 421.375 369.1875 C421.58566101 369.9831839 421.79632202 370.7788678 422.0133667 371.59866333 C426.77653333 390.20317904 427.08930923 408.25288889 426.89318848 427.30426025 C426.86883573 430.41152353 426.87463006 433.51844636 426.88001347 436.62577724 C426.90687912 458.87036291 425.17153372 478.63352749 417.9375 499.75 C417.54558472 500.90964264 417.54558472 500.90964264 417.14575195 502.0927124 C402.77415327 544.4224778 376.94962763 581.75584865 341.375 609.1875 C340.36050781 609.99574219 339.34601562 610.80398438 338.30078125 611.63671875 C315.99552366 629.30240131 291.04769042 641.02318267 264 649.6875 C263.28295898 649.91840332 262.56591797 650.14930664 261.82714844 650.38720703 C250.2177262 653.94667424 238.91344781 654.49995235 226.86328125 654.48828125 C225.16529743 654.4921821 223.46731456 654.49651954 221.76933289 654.50126648 C218.21655109 654.50869575 214.66386867 654.50846483 211.11108398 654.50317383 C207.51850784 654.49856838 203.9262722 654.50536413 200.33374023 654.52368164 C175.42142248 654.64946461 151.28669657 654.1619795 127 647.9375 C124.45522973 647.31798041 121.90990483 646.70161531 119.36328125 646.08984375 C118.71640854 645.93343918 118.06953583 645.77703461 117.40306091 645.6158905 C99.37701939 641.28185069 81.14315819 637.58748691 62.8125 634.8125 C61.79841064 634.65692627 60.78432129 634.50135254 59.73950195 634.34106445 C42.94267287 631.94504014 26.04309758 632.00108825 9.11279297 632.00219727 C5.40971199 632.00002041 1.70693449 631.98182629 -1.99609375 631.96289062 C-22.9892975 631.91204016 -43.7675908 633.03973825 -64.5 636.4375 C-65.16200409 636.54354553 -65.82400818 636.64959106 -66.506073 636.7588501 C-80.34764253 638.98183486 -93.98135966 641.98144231 -107.625 645.1875 C-112.36890129 646.29386635 -117.11545834 647.38833054 -121.86398315 648.47467041 C-123.79689344 648.91952401 -125.72772226 649.37339245 -127.65844727 649.82763672 C-143.49492036 653.47094215 -158.50357004 654.50154708 -174.6875 654.48828125 C-176.69279059 654.49218013 -178.69808038 654.49651719 -180.70336914 654.50126648 C-184.88202609 654.50867745 -189.06059845 654.50847423 -193.23925781 654.50317383 C-198.55440051 654.49737549 -203.86919516 654.51434434 -209.1842804 654.5375185 C-213.31793185 654.55235198 -217.4515012 654.55311473 -221.58517456 654.55000877 C-223.54329113 654.55051681 -225.50141293 654.5556555 -227.45950317 654.56582069 C-243.31859234 654.63809151 -257.22001585 652.72126331 -272.3125 647.5625 C-273.33142334 647.21767578 -274.35034668 646.87285156 -275.40014648 646.51757812 C-285.44035184 643.0378274 -295.08935681 638.8651649 -304.625 634.1875 C-305.30884766 633.85250488 -305.99269531 633.51750977 -306.69726562 633.17236328 C-327.21060286 622.98163764 -345.20128443 609.05211036 -361.625 593.1875 C-362.24584473 592.58856934 -362.86668945 591.98963867 -363.50634766 591.37255859 C-371.41634361 583.70015951 -378.87965794 575.92265539 -385.625 567.1875 C-386.43324219 566.18460938 -387.24148438 565.18171875 -388.07421875 564.1484375 C-410.8333664 535.69622352 -424.43673847 499.84740604 -430.625 464.1875 C-430.801521 463.19041016 -430.97804199 462.19332031 -431.15991211 461.16601562 C-431.88827998 455.93332805 -431.80741725 450.66816124 -431.828125 445.39453125 C-431.83382507 444.25328293 -431.83952515 443.11203461 -431.84539795 441.936203 C-431.85482526 439.51973387 -431.86137289 437.10325201 -431.86523438 434.68676758 C-431.87484845 431.05721304 -431.90585599 427.42824778 -431.9375 423.79882812 C-432.02044846 405.89308738 -430.84529178 388.70136228 -425.5625 371.5 C-425.26649902 370.51507568 -424.97049805 369.53015137 -424.66552734 368.51538086 C-415.1517443 337.81004593 -400.4542466 306.2115202 -377.51393127 283.12330627 C-374.93893247 280.52908499 -372.45120322 277.8630478 -369.97255039 275.17700291 C-362.54686193 267.1338625 -354.89958578 259.33894459 -347.13580513 251.62314034 C-345.0005347 249.50093783 -342.86867162 247.37536002 -340.73753357 245.24900818 C-336.22371929 240.74646046 -331.70591294 236.2479322 -327.1875 231.75 C-321.91845801 226.50469936 -316.65114162 221.25768803 -311.38801384 216.00645256 C-309.3013153 213.92616954 -307.21160084 211.84895045 -305.12171936 209.77186584 C-296.78326359 201.46573856 -296.78326359 201.46573856 -288.9238739 192.70899963 C-287.22900626 190.72363331 -285.41121502 188.89196809 -283.5390625 187.07421875 C-282.49105469 186.04663452 -282.49105469 186.04663452 -281.421875 184.99829102 C-280.70515625 184.29760498 -279.9884375 183.59691895 -279.25 182.875 C-273.66291036 177.35450904 -268.42334943 171.82270185 -263.578125 165.63671875 C-261.60928042 163.16778764 -259.52670886 160.87287804 -257.375 158.5625 C-248.98494371 149.32907583 -241.73507696 139.09158309 -234.3828125 129.02929688 C-224.93090829 116.10119234 -215.10721738 103.62763451 -204.171875 91.91796875 C-201.78091984 89.35465946 -199.44855911 86.74930346 -197.125 84.125 C-189.78640993 75.95934164 -182.01803702 68.26670986 -173.625 61.1875 C-172.79097656 60.45273437 -171.95695312 59.71796875 -171.09765625 58.9609375 C-139.82727572 31.93715186 -94.72177067 10.00504084 -53.625 4.1875 C-52.7592334 4.06181641 -51.8934668 3.93613281 -51.00146484 3.80664062 C-34.00150782 1.36456283 -17.17894891 -0.0281 0 0 Z M-90.63295269 144.20176601 C-99.24587982 144.26366121 -107.85815761 144.34795678 -116.47056389 144.46378136 C-118.93312056 144.49530906 -121.39574045 144.52228534 -123.85840034 144.54432106 C-142.95515341 144.72414833 -158.8250257 144.95137735 -173.5625 158.625 C-184.4297696 170.42597296 -184.10423659 187.98237968 -184.30419922 203.1262207 C-184.33704628 204.90581215 -184.37048775 206.6853927 -184.40446281 208.46496296 C-184.81375941 231.74079601 -184.77135133 255.02388265 -184.7593255 278.30242705 C-184.7570022 284.23819104 -184.75880315 290.17395368 -184.7602527 296.10971764 C-184.76307278 308.5872934 -184.75987652 321.06486169 -184.75445233 333.54243622 C-184.74999279 344.1263577 -184.75076009 354.71026818 -184.75537109 365.29418945 C-184.76078853 377.73407445 -184.76279301 390.17395296 -184.75975883 402.61383897 C-184.75820777 409.14392545 -184.7579131 415.67400592 -184.76129532 422.20409203 C-184.77172463 446.0557837 -184.75662655 469.90956121 -184.3525846 493.75847113 C-184.32102603 495.695156 -184.29371432 497.63191611 -184.27125382 499.56872785 C-184.05126562 517.51755479 -183.34564627 536.22725478 -170.625 550.1875 C-162.35075012 558.06167626 -151.37873413 561.30756891 -140.11122513 561.31613445 C-139.03401018 561.3193589 -137.95679524 561.32258335 -136.84693742 561.3259055 C-135.08811569 561.3235826 -135.08811569 561.3235826 -133.29376221 561.32121277 C-132.03951816 561.32347833 -130.78527412 561.32574388 -129.49302268 561.32807809 C-126.0182369 561.33418712 -122.54347522 561.33406353 -119.06868529 561.33288372 C-115.31789642 561.33267946 -111.56711524 561.33820105 -107.81632996 561.34294128 C-100.46774254 561.35124523 -93.11916315 561.35399608 -85.77057144 561.35455366 C-79.79117641 561.35502927 -73.81178402 561.35708629 -67.83238983 561.36025429 C-50.85972303 561.36906286 -33.88706255 561.37367375 -16.91439345 561.37292381 C-15.54210317 561.37286388 -15.54210317 561.37286388 -14.14208984 561.37280273 C-13.22610448 561.37276185 -12.31011911 561.37272097 -11.36637661 561.37267885 C3.45207115 561.3722731 18.27049341 561.38182429 33.0889338 561.3959411 C48.32403966 561.41033952 63.55913312 561.41720927 78.79424596 561.41634732 C87.33941171 561.41601638 95.88455079 561.41871778 104.42971039 561.42952538 C111.7116587 561.43867643 118.99356827 561.44076839 126.27551988 561.43401595 C129.9840566 561.43077282 133.6925192 561.43061291 137.40104866 561.4393692 C178.51349138 561.71407975 178.51349138 561.71407975 212.5 540.5625 C241.57821389 510.9910342 253.90081727 469.11061343 253.6875 428.375 C253.68534485 427.62915649 253.6831897 426.88331299 253.68096924 426.11486816 C253.62900651 414.88551225 253.12896626 404.11083568 250.375 393.1875 C250.16568848 392.32801758 249.95637695 391.46853516 249.74072266 390.58300781 C240.52659713 353.27003807 223.44429682 325.00287151 196.04541016 297.87475586 C192.51380954 294.36555991 189.11653585 290.79736695 185.91015625 286.984375 C184.87445668 285.77210579 183.79681118 284.59462278 182.68359375 283.453125 C176.01272485 276.46885957 171.9462238 267.68087578 167.88671875 259.0078125 C162.51015219 247.58828803 155.01148872 238.35023291 145.89453125 229.69921875 C143.96297988 227.77365669 142.22553464 225.86161538 140.46728516 223.78857422 C135.37637309 217.94836614 129.8597897 212.52814928 124.37890625 207.05859375 C123.21965727 205.89866945 122.06055663 204.73859688 120.90159607 203.5783844 C118.48346178 201.1587839 116.0635492 198.74098029 113.64233398 196.32446289 C110.55823528 193.24606078 107.47864906 190.16318977 104.40039158 187.07894802 C102.01112967 184.68605131 99.61946486 182.29556762 97.22709465 179.90577888 C96.09140839 178.77075383 94.95644814 177.63500181 93.82226753 176.49847221 C69.77969806 152.4170299 50.10488038 144.03780105 15.91272068 143.93459606 C12.3988009 143.93527692 8.88499452 143.94581171 5.37109375 143.95703125 C2.84294153 143.95822961 0.31478885 143.95867483 -2.21336365 143.9584198 C-7.5160523 143.95997778 -12.81867136 143.96793692 -18.12133789 143.98168945 C-24.72895805 143.99877365 -31.3365172 144.00239722 -37.94416237 144.00190926 C-55.50761363 144.00210714 -73.06996892 144.0769853 -90.63295269 144.20176601 Z " fill="#ffffff" transform="translate(684.625,585.8125)"/>
<path d="M0 0 C17.8457051 14.82286979 30.9193419 32.18790542 41.75 52.625 C42.30445801 53.66793213 42.30445801 53.66793213 42.87011719 54.73193359 C74.00918668 114.38405888 73.01477927 189.89222835 54 252.9375 C42.40428525 289.82200971 23.8541865 323.25155777 -2.91601562 351.22802734 C-4.05358673 352.41931246 -5.17678224 353.62429764 -6.296875 354.83203125 C-28.29728402 377.91365696 -61.45818544 395.90952713 -93.609375 396.86328125 C-131.39768757 397.43171907 -160.00354602 385.8907205 -187.4375 359.875 C-199.19032369 347.62918874 -208.32996481 333.56984517 -216.25 318.625 C-216.61963867 317.92971191 -216.98927734 317.23442383 -217.37011719 316.51806641 C-248.50918668 256.86594112 -247.51477927 181.35777165 -228.5 118.3125 C-216.90428525 81.42799029 -198.3541865 47.99844223 -171.58398438 20.02197266 C-170.44641327 18.83068754 -169.32321776 17.62570236 -168.203125 16.41796875 C-124.13949398 -29.8111826 -51.0022816 -41.21938782 0 0 Z " fill="#ffffff" transform="translate(939.25,158.375)"/>
<path d="M0 0 C20.68733562 17.49765832 36.85883866 37.15549238 50.375 60.625 C50.74608887 61.26791992 51.11717773 61.91083984 51.49951172 62.57324219 C65.98392669 87.9627054 74.61392381 116.099375 80.375 144.625 C80.54370605 145.45773437 80.71241211 146.29046875 80.88623047 147.1484375 C92.79201341 208.04863182 84.06955709 278.81814717 49.3125 331.1875 C37.33067034 348.75042408 23.25273341 364.01977208 5.375 375.625 C4.52679687 376.19605469 3.67859375 376.76710938 2.8046875 377.35546875 C-22.62905263 393.68174748 -54.57062099 396.93229936 -83.625 390.625 C-126.84678 379.73787952 -161.33470944 346.59242465 -183.75488281 309.26513672 C-185.05812209 307.05910806 -186.34630296 304.84533381 -187.625 302.625 C-187.99608887 301.98208008 -188.36717773 301.33916016 -188.74951172 300.67675781 C-203.23392669 275.2872946 -211.86392381 247.150625 -217.625 218.625 C-217.79370605 217.79226563 -217.96241211 216.95953125 -218.13623047 216.1015625 C-230.04201341 155.20136818 -221.31955709 84.43185283 -186.5625 32.0625 C-174.58067034 14.49957592 -160.50273341 -0.76977208 -142.625 -12.375 C-141.35269531 -13.23158203 -141.35269531 -13.23158203 -140.0546875 -14.10546875 C-95.68967466 -42.5840001 -39.19754819 -31.45897644 0 0 Z " fill="#ffffff" transform="translate(574.625,167.375)"/>
<path d="M0 0 C3.43525857 2.90193075 6.74309074 5.89930877 10 9 C10.84498047 9.8041333 10.84498047 9.8041333 11.70703125 10.62451172 C20.63269651 19.17670836 28.7156372 28.01059971 36 38 C36.76699219 39.04542969 37.53398437 40.09085937 38.32421875 41.16796875 C74.03016638 91.33077476 91.20835518 154.07297625 81.1875 215.21875 C76.92091382 239.08539791 68.06640501 262.80856925 53 282 C52.57605957 282.54060059 52.15211914 283.08120117 51.71533203 283.63818359 C33.93910569 306.06467594 11.07441976 321.00658455 -17 327 C-18.47339844 327.33644531 -18.47339844 327.33644531 -19.9765625 327.6796875 C-55.6654782 334.55380583 -94.30882185 323.38943469 -124.12890625 303.66015625 C-135.31883392 296.0457757 -145.78682385 287.86819973 -155.50927734 278.44384766 C-156.9496267 277.04878934 -158.40619733 275.67053922 -159.86328125 274.29296875 C-167.00620178 267.3925236 -173.07036609 259.9338022 -179 252 C-179.4213623 251.44473633 -179.84272461 250.88947266 -180.27685547 250.31738281 C-208.80828389 212.59484605 -226.70335548 164.41208892 -228 117 C-228.05994141 115.07994141 -228.05994141 115.07994141 -228.12109375 113.12109375 C-229.05014308 68.5003323 -215.84564862 25.26857017 -184.875 -7.5 C-131.83870413 -58.97098852 -52.3100675 -43.89620852 0 0 Z " fill="#ffffff" transform="translate(302,455)"/>
<path d="M0 0 C1.45986328 1.19689453 1.45986328 1.19689453 2.94921875 2.41796875 C31.0959033 26.73817592 44.76725531 63.65491866 48 100 C48.34287807 105.85002213 48.34152144 111.70443643 48.3125 117.5625 C48.31034485 118.35024811 48.3081897 119.13799622 48.30596924 119.94961548 C48.05682336 176.92985463 25.60491764 232.55145806 -12.77734375 274.5546875 C-14.91048395 276.90151662 -16.98632073 279.29034586 -19.0625 281.6875 C-22.77021591 285.84507576 -26.6863436 289.48096452 -31 293 C-31.49242187 293.40476562 -31.98484375 293.80953125 -32.4921875 294.2265625 C-63.4043955 319.51836904 -101.42209817 337.52222156 -142.26220703 333.79345703 C-173.78675566 330.30684063 -200.83414561 315.461875 -220.7578125 290.65625 C-248.41956186 254.46723445 -254.81542632 206.96776249 -249.48046875 162.79589844 C-242.48218462 110.91260172 -218.6596528 64.84608406 -183 27 C-182.27167969 26.21753906 -181.54335937 25.43507813 -180.79296875 24.62890625 C-174.4422585 18.01898334 -167.31604524 12.48757812 -160 7 C-159.13246094 6.34902344 -158.26492188 5.69804687 -157.37109375 5.02734375 C-111.28575285 -28.30291103 -46.27417724 -38.67786908 0 0 Z " fill="#ffffff" transform="translate(1221,431)"/>
<path d="M0 0 C1.18450241 -0.00511093 2.36900482 -0.01022186 3.58940125 -0.01548767 C6.82726552 -0.0269826 10.06497052 -0.02946071 13.30284977 -0.02692437 C16.01371082 -0.02585127 18.72454852 -0.03074698 21.43540454 -0.03552979 C27.83732536 -0.04661191 34.23918751 -0.04707051 40.64111328 -0.04101562 C47.22467458 -0.03498415 53.80802172 -0.04726865 60.39154649 -0.06858569 C66.06058042 -0.08626036 71.72954657 -0.09219363 77.39860702 -0.08894795 C80.77696924 -0.08714335 84.15517888 -0.0896877 87.53351593 -0.10366249 C91.30766596 -0.11605052 95.08132608 -0.10921982 98.85546875 -0.09765625 C100.51261147 -0.10912186 100.51261147 -0.10912186 102.20323181 -0.12081909 C109.31444638 -0.07285805 117.49940522 0.07682495 123.13054276 4.96070385 C127.69882659 9.91939194 129.43424057 14.64532771 129.44721985 21.39605713 C129.45430466 22.62680466 129.46138947 23.85755219 129.46868896 25.12559509 C129.46639532 26.48159827 129.46388565 27.83760109 129.46118164 29.19360352 C129.46553105 30.62799851 129.47071496 32.06239117 129.47666931 33.4967804 C129.49004934 37.38748662 129.49063886 41.27809564 129.48810601 45.16882038 C129.48703514 48.42152553 129.49192291 51.67421111 129.49671143 54.92691207 C129.50780422 62.60550513 129.508246 70.28404928 129.50219727 77.96264648 C129.49616354 85.87028757 129.50845366 93.77775046 129.52976733 101.68536115 C129.54741652 108.4847086 129.55337928 115.28399952 129.55012959 122.08336902 C129.5483211 126.1396664 129.55090895 130.1958368 129.56484413 134.25211334 C129.57747115 138.07055022 129.57543266 141.88871087 129.56243324 145.70714378 C129.56007808 147.10306837 129.56276389 148.49901268 129.57105637 149.89491463 C129.66678854 167.27284085 129.66678854 167.27284085 124.55907154 173.14599991 C117.54023441 179.92090536 109.18804152 179.56937217 99.96826172 179.54931641 C98.75274628 179.55442734 97.53723083 179.55953827 96.28488159 179.56480408 C92.96653307 179.57628779 89.64843509 179.5787792 86.33008432 179.57624078 C83.55197521 179.57516702 80.77388885 179.58006481 77.99578464 179.5848462 C71.43711368 179.59592167 64.8785 179.59639002 58.31982422 179.59033203 C51.57206155 179.58429485 44.82450752 179.59660114 38.07678044 179.6179021 C32.26676682 179.63556302 26.45681934 179.64151236 20.64677989 179.63826436 C17.18406995 179.63645831 13.72150883 179.63901921 10.25882339 179.6529789 C6.39365824 179.66797958 2.52875532 179.65854792 -1.33642578 179.64697266 C-2.47126404 179.65461639 -3.60610229 179.66226013 -4.77532959 179.6701355 C-11.773772 179.6239312 -18.86648089 179.31367945 -24.61800957 174.88524342 C-32.06514092 167.25515329 -31.10587632 155.97373847 -31.07226562 146.01318359 C-31.07577026 144.72241409 -31.0792749 143.43164459 -31.08288574 142.10176086 C-31.09193569 138.58929087 -31.08849608 135.07693951 -31.08212757 131.56446767 C-31.0770279 127.8700781 -31.08177007 124.175698 -31.0848999 120.48130798 C-31.08852852 114.27869869 -31.08377002 108.07613718 -31.07421875 101.87353516 C-31.06334113 94.727598 -31.06685919 87.58177505 -31.07787156 80.43584067 C-31.08698177 74.27499868 -31.0882114 68.11419084 -31.08299422 61.95334429 C-31.07989435 58.28497381 -31.07941 54.6166568 -31.0860672 50.94828987 C-31.09297963 46.85396823 -31.08336724 42.75983979 -31.07226562 38.66552734 C-31.07631409 37.46778687 -31.08036255 36.27004639 -31.08453369 35.03601074 C-31.03212622 24.55231654 -30.95138355 14.47230151 -23.20800781 6.65356445 C-16.12531813 0.13373752 -9.29024985 -0.02068171 0 0 Z M-6.37597656 36.01293945 C-14.86146215 46.48551218 -13.65384846 64.29518514 -13.78808594 76.99816895 C-13.81719081 79.60767247 -13.85459968 82.21701276 -13.89160156 84.82641602 C-13.96243781 90.10515018 -14.00892392 95.38373902 -14.04162598 100.6628418 C-14.05605043 102.79959455 -14.074762 104.93632321 -14.09802246 107.07299805 C-15.04583007 129.60007181 -15.04583007 129.60007181 -5.81347656 149.2746582 C-0.35267234 154.0130214 5.06517914 156.36251071 12.18652344 157.2746582 C14.12954346 157.52807983 14.12954346 157.52807983 16.11181641 157.78662109 C21.71491837 158.40305218 27.28129251 158.41839103 32.91308594 158.4074707 C34.57191299 158.40890579 34.57191299 158.40890579 36.26425171 158.41036987 C38.59560198 158.41104742 40.92695418 158.40922295 43.25830078 158.4050293 C46.77999238 158.39970587 50.30155467 158.40497299 53.82324219 158.41137695 C81.65954488 159.92272993 81.65954488 159.92272993 106.50292969 150.1184082 C116.20824445 139.48985004 115.49381309 123.76842695 115.45214844 110.27856445 C115.4535014 108.87336663 115.45544712 107.46816927 115.45794678 106.06297302 C115.46086942 103.13926674 115.45669451 100.21568393 115.44726562 97.29199219 C115.43588346 93.58648855 115.44244106 89.8812752 115.45441055 86.1757822 C115.46171643 83.28002323 115.45930156 80.38433048 115.45415497 77.48856926 C115.4522139 75.47158998 115.45817727 73.45460789 115.4644165 71.43763733 C115.40298829 59.17667385 115.05793907 46.33123021 108.56152344 35.5871582 C96.96801682 24.29874387 79.54802931 25.12905102 64.45996094 25.0715332 C63.2728653 25.06583313 62.08576965 25.06013306 60.86270142 25.05426025 C58.36339188 25.04486751 55.86407028 25.03829925 53.36474609 25.03442383 C49.59287286 25.0247387 45.82155006 24.99366737 42.04980469 24.9621582 C15.69777172 23.97385629 15.69777172 23.97385629 -6.37597656 36.01293945 Z " fill="#ffffff" transform="translate(596.8134765625,802.725341796875)"/>
<path d="M0 0 C21.57031016 9.58194305 39.59673845 40.39118581 47.81494141 61.54589844 C48.67563876 63.84736059 49.49766271 66.15831303 50.30078125 68.48046875 C50.54376953 69.17615967 50.78675781 69.87185059 51.03710938 70.58862305 C55.28241573 83.60866496 55.33320158 96.73099521 55.30395508 110.28295898 C55.30079113 113.34590147 55.32434138 116.40787904 55.34960938 119.47070312 C55.3847118 130.19145073 55.00891759 140.05850734 51.98828125 150.41796875 C51.77985596 151.15281494 51.57143066 151.88766113 51.35668945 152.64477539 C48.6956011 161.26537388 44.67452354 169.36078873 40.55078125 177.35546875 C40.10863281 178.21922119 39.66648437 179.08297363 39.2109375 179.97290039 C33.58057414 190.59427807 25.92175667 200.33342011 16.17578125 207.48046875 C11.11995557 208.9674763 6.20680978 209.09132727 0.98828125 208.41796875 C-2.53293714 206.37566208 -3.76389552 204.78970359 -6.01171875 201.41796875 C-7.42771638 194.12930725 -4.76943757 188.51951724 -1.01171875 182.41796875 C0.07768404 180.86583419 1.18238825 179.32434631 2.30078125 177.79296875 C19.91906162 153.30394288 26.42786567 120.9363773 22.11791992 91.27563477 C18.3656836 68.59089286 7.93118958 50.57676377 -7.01171875 33.41796875 C-18.92550509 19.51924057 -18.92550509 19.51924057 -19.44921875 11.35546875 C-18.95120355 6.87333195 -17.92732895 4.81951398 -15.01171875 1.41796875 C-10.30447866 -1.44560231 -5.24125628 -1.5164023 0 0 Z " fill="#ffffff" transform="translate(844.01171875,900.58203125)"/>
<path d="M0 0 C11.51833789 6.40401798 16.89536945 20.12847633 20.50585938 32.16577148 C24.73544132 48.75388871 23.71539782 67.74646677 17 83.5 C16.71060547 84.19158203 16.42121094 84.88316406 16.12304688 85.59570312 C11.09931064 97.27508991 4.3430658 106.86583239 -6 114.5 C-10.62060956 116.04020319 -15.17463376 116.01574193 -20 115.5 C-23.71153084 113.37912523 -25.35570544 111.36726788 -27 107.5 C-28.97362154 97.02462414 -23.09532382 88.85240316 -17.8125 80.3125 C-15.08252287 75.80768135 -13.20677317 71.63073236 -12 66.5 C-11.74863281 65.43394531 -11.49726562 64.36789062 -11.23828125 63.26953125 C-8.71421083 49.65705898 -11.82629445 37.0476933 -17.25 24.5 C-20.33061431 17.27810417 -21.69017889 11.00714369 -18.875 3.5 C-13.56688673 -2.16198749 -6.98183786 -3.03265158 0 0 Z " fill="#ffffff" transform="translate(807,956.5)"/>
<path d="M0 0 C2.26726058 0.00314427 4.53319505 -0.02025609 6.80029297 -0.0456543 C20.54457196 -0.10695126 20.54457196 -0.10695126 27.03857422 3.31567383 C33.03962723 9.47059999 32.28667038 15.81735898 32.33374023 23.97485352 C32.34523771 25.36167624 32.36565462 26.74845549 32.39526367 28.13500977 C32.70027865 42.42811379 32.70027865 42.42811379 28.03857422 48.31567383 C22.18967005 53.63285944 14.944094 52.536298 7.52490234 52.5559082 C5.31032244 52.56557886 3.09668505 52.59659649 0.88232422 52.62817383 C-0.53954531 52.63470812 -1.96142143 52.63995692 -3.38330078 52.64379883 C-4.66817383 52.65314453 -5.95304688 52.66249023 -7.27685547 52.67211914 C-12.77582153 52.14014919 -16.56861167 50.49653796 -20.83642578 46.87817383 C-24.24992137 42.33430757 -23.87702568 36.77571128 -23.96142578 31.31567383 C-23.98849609 30.22125977 -24.01556641 29.1268457 -24.04345703 27.99926758 C-24.08544559 24.76614861 -24.04658796 21.54778144 -23.96142578 18.31567383 C-23.94466797 17.38110352 -23.92791016 16.4465332 -23.91064453 15.48364258 C-23.59296861 9.42964723 -22.43204627 6.47439056 -17.96142578 2.31567383 C-12.77740632 -1.13269092 -5.99184096 -0.01739941 0 0 Z " fill="#ffffff" transform="translate(643.96142578125,868.684326171875)"/>
</svg>
'''

# create tables if not exist
if not db.table_exists("users"):
    db.create_table("tagConfig", "id TEXT UNIQUE, name TEXT, mailto TEXT, sendActive INTEGER")

if not db.table_exists("mailConfig"):
    db.create_table("mailConfig", "mailAddress TEXT, smtpServer TEXT, smtpPort TEXT, username TEXT, password TEXT")
    db.insert("mailConfig", ("mailAddress","smtpServer","smtpPort","username","password"), ("","","","",""))

if not db.table_exists("tagLogging"):
    db.create_table("tagLogging", "id TEXT, name TEXT, timestamp NUMERIC")

dark = ui.dark_mode()

class Data:
    ''' Data Class for global use'''
    selectedConfigRow = {}

    def setRow(e):
        Data.selectedConfigRow = e.args['data']

class MailSettings:

    mailAddress = ''
    smtpServer = ''
    smtpPort = ''
    username = ''
    password = ''

    def getMailConfig():
        ''' get mail config from db '''
        try:
            data = db.read('SELECT "_rowid_",* FROM mailConfig')
            MailSettings.mailAddress = data[0][1]
            MailSettings.smtpServer = data[0][2]
            MailSettings.smtpPort = data[0][3]
            MailSettings.username = data[0][4]
            MailSettings.password = data[0][5]
        except Exception as e:
            logger.error(str(datetime.now()) + " : " +e)
            MailSettings.mailAddress = ""
            MailSettings.smtpServer = ""
            MailSettings.smtpPort = ""
            MailSettings.username = ""
            MailSettings.password = ""

    def setMailConfig(mailAddress, smtpServer, smtpPort, username, password):
        db.update("mailConfig", "mailAddress = ?, smtpServer = ?, smtpPort = ?, username = ?, password = ?", """"_rowid_"='1'""", (mailAddress, smtpServer, smtpPort, username, password))
        MailSettings.mailAddress = mailAddress
        MailSettings.smtpServer = smtpServer
        MailSettings.smtpPort = smtpPort
        MailSettings.username = username
        MailSettings.password = password

    def sendMail(to, time, id, name):
        ''' send mail '''
        MailSettings.getMailConfig()
        try:
            email_address = MailSettings.mailAddress
            email_password = MailSettings.password
            smtp_port = MailSettings.smtpPort
            smtp_server = MailSettings.smtpServer

            if email_address is None or email_password is None:
                # no email address or password
                # something is not configured properly
                logger.warning(str(datetime.now()) + " : " +"Username und Password wurden nicht gesetzt")
                return False
            
            htmlContent = """
            <style>
                .table_component {
                    overflow: auto;
                    width: 100%;
                }

                .table_component table {
                    border: 1px solid #dededf;
                    height: 100%;
                    width: 100%;
                    table-layout: auto;
                    border-collapse: collapse;
                    border-spacing: 1px;
                    text-align: left;
                }

                .table_component caption {
                    caption-side: top;
                    text-align: left;
                }

                .table_component th {
                    border: 1px solid #dededf;
                    background-color: #eceff1;
                    color: #000000;
                    padding: 5px;
                }

                .table_component td {
                    border: 1px solid #dededf;
                    background-color: #ffffff;
                    color: #000000;
                    padding: 5px;
                }
                </style>
                <div class="table_component" role="region" tabindex="0">
                <table>
                    <caption>Es wurde ein Tierchip erkannt!</caption>
                    <thead>
                        <tr>
                            <th>Key</th>
                            <th>Wert</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Chip ID</td>
                            <td>"""+ id +"""</td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>"""+ name +"""</td>
                        </tr>
                        <tr>
                            <td>Zeit</td>
                            <td>"""+ time +"""</td>
                        </tr>
                    </tbody>
                </table>
                </div>
            """

            # create email
            msg = EmailMessage()
            msg['Subject'] = 'Tierchip erkannt'
            msg['From'] = email_address
            msg['To'] = to
            msg.set_content(htmlContent, subtype='html')
            #msg.set_content('Die Chip ID: ' + id + ',\n\n mit dem Namen: ' + name + ',\n\n wurde zu folgender Zeit erkannt: ' + time)

            context = ssl.create_default_context()
            # send email
            with smtplib.SMTP_SSL(smtp_server, int(smtp_port)) as smtp:
                smtp.login(email_address, email_password)
                smtp.send_message(msg)
            return True
        except Exception as e:
            logger.error(str(datetime.now()) + " : " +"E-Mail konnte nicht gesendet werden")
            logger.error(str(datetime.now()) + " : " +str(e))
        return False

def loadConfig():
    data = db.read('SELECT "_rowid_",* FROM "main"."tagConfig"')
    jsonList = []
    if data:
        for conf in data:
            jsonObject = {}
            jsonObject['id'] = conf[1]
            jsonObject['name'] = conf[2]
            jsonObject['mailto'] = conf[3]
            if conf[4] == 1:
                jsonObject['sendActive'] = True
            else:
                jsonObject['sendActive'] = False
            jsonList.append(jsonObject)
        return jsonList
    else:
        return jsonList
    
def loadItem(id):
    data = db.read('''SELECT "_rowid_",* FROM "main"."tagConfig" WHERE "id" LIKE '%'''+id+'''%' LIMIT 1 OFFSET 0;''')
    if data:
        jsonObject = {}
        jsonObject['id'] = data[0][1]
        jsonObject['name'] = data[0][2]
        jsonObject['mailto'] = data[0][3]
        if data[0][4] == 1:
            jsonObject['sendActive'] = True
        else:
            jsonObject['sendActive'] = False
    else:
        jsonObject = {"id": "", "name": "", "mailto": "", "sendActive": False}
    return jsonObject

def loadMailConfig():
    try:
        data = db.read('SELECT "_rowid_",* FROM "main"."mailConfig" LIMIT 49999 OFFSET 0;')
        mail.value = data[0][1]
        server.value = data[0][2]
        port.value = data[0][3]
        username.value = data[0][4]
        password.value = data[0][5]
        return data
    except Exception as e:
        logger.error(str(datetime.now()) + " : " +e)
        return None

def loadLogging():
    try:
        data = db.read('SELECT "_rowid_",* FROM "main"."tagLogging" ORDER BY timestamp DESC LIMIT 1000;')
        jsonList = []
        for conf in data:
            jsonObject = {}
            jsonObject['id'] = conf[1]
            jsonObject['name'] = conf[2]
            jsonObject['timestamp'] = conf[3]
            jsonList.append(jsonObject)
        return jsonList
    except Exception as e:
        logger.error(str(datetime.now()) + " : " +"Keine Logging Daten: " + str(e))
        return None
    
def logToDb(id, name, timestamp):
    try:
        db.insert("tagLogging", ["id","name","timestamp"], (id, name, timestamp))
    except sqlite3.IntegrityError as e:
        dialog.open(str(e.__traceback__))

def fillConfig(e):
    id.value = e.args['data']['id']

def changeValues(e):
    rowData = e.args['data']
    if rowData['sendActive'] == True:
        sendActive = 1
    else:
        sendActive = 0
    try:
        db.update("tagConfig", "sendActive = ?, mailto = ?, name = ?", 'id = "' + rowData['id'] + '"', (str(sendActive), rowData['mailto'], rowData['name']))
        updateGrid()
    except sqlite3.IntegrityError:
        ui.notify("Fehler beim Updaten des Wertes")


def updateGrid():
    grid.options['rowData'] = loadConfig()
    grid.update()
    

def assignNameToId(id, name):
    try:
        db.insert("tagConfig", ["id", "name"], (id, name))
        updateGrid()
    except sqlite3.IntegrityError:
        dialog.open()

def updateNameToId(id, name):
    try:
        db.update("tagConfig", "name = ?", 'id = "' + id + '"', (name))
        dialog.close()
        updateGrid()
    except sqlite3.IntegrityError:
        ui.notify("Fehler beim Updaten des Wertes")

def delete_selected():
    try:
        db.delete("tagConfig", 'id = "' + Data.selectedConfigRow["id"] + '"', ())
        updateGrid()
    except sqlite3.IntegrityError:
        ui.notify("Fehler beim Löschen des Wertes")

# define popup dialog 
with ui.dialog() as dialog, ui.card().classes('items-center justify-between'):
    ui.label('Diese ID ist bereits vorhanden')
    ui.label('Soll der Name der vorhandenen ID geändert werden?')
    with ui.row():
        ui.button('Yes', on_click=lambda: updateNameToId(id.value, name.value))
        ui.button('No', on_click=lambda: dialog.close())


# define ui
with ui.header(elevated=True).style('background-color: #dedede, color: black').classes('items-center justify-between'):
    with ui.column():
        with ui.row().classes('items-center justify-between'):
            ui.html(logo).style('height: auto')
            ui.label('TES').style('font-size: 300%; font-weight: 400')
    ui.label('TierErfassungsSystem').style('font-size: 200%; font-weight: 400')
    with ui.tabs() as tabs:
        one = ui.tab('Events')
        two = ui.tab('Konfiguration')
with ui.footer().style('background-color: #dedede, color: black'):
    ui.label('©️ fade2metal 2025')
with ui.tab_panels(tabs, value=one).classes('w-full max-h-full'):
    with ui.tab_panel(one):
        ui.label('Erkannte Tags')
        loggingGrid = ui.aggrid({
            'defaultColDef': {'flex': 1},
            'columnDefs': [
                {'headerName': 'Zeit', 'field': 'timestamp','filter': 'agDateColumnFilter', "sortingOrder": ["desc"]},
                {'headerName': 'ID', 'field': 'id'},
                {'headerName': 'Name', 'field': 'name'},
            ],
            'rowData': loadLogging(),
            'rowSelection': 'multiple',
        }).classes('max-h-full').on('cellClicked', fillConfig)
        #.on('cellClicked', lambda event: fillConfig(event.args["value"]))
        
    with ui.tab_panel(two):
        with ui.row():
            with ui.card().classes('max-h-80'):
                ui.label('Mailserver Einstellungen')
                with ui.row():
                    server = ui.input('SMTP Server')
                    port = ui.input('SMTP Port')
                    mail = ui.input('Absender Mail:')
                    username = ui.input('Benutzername:')
                    password = ui.input('Passwort:',password=True)
                    ui.button(text='Speichern', on_click=lambda: MailSettings.setMailConfig(mail.value, server.value, port.value, username.value, password.value))    
                #ui.button(text='Mail senden', on_click=lambda: sendMail('dpfingst@me.com', '2024-08-15T21:39:00', '123124', 'Test'))
        with ui.card().classes('w-full'):
            ui.label('Namenszuweisung (Bitte auf der Events Seite eine Zeile auswählen, um die ID zu übernehmen)')
            with ui.row().classes('max-h-80'):
                id = ui.input('ID:')
                name = ui.input('Name:')
                ui.button(text='Hinzufügen', on_click=lambda: assignNameToId(id.value, name.value)) 
                ui.button('Ausgewählte Zeile löschen', on_click=delete_selected)   
            grid = ui.aggrid({
                'defaultColDef': {'flex': 1},
                'columnDefs': [
                    {'headerName': 'ID', 'field': 'id'},
                    {'headerName': 'Name', 'field': 'name', 'editable': True},
                    {'headerName': 'Mailempfänger', 'field': 'mailto', 'editable': True},
                    {'headerName': 'Senden aktiv', 'field': 'sendActive', 'editable': True},
                ],
                'rowData': loadConfig(),
                'rowSelection': 'multiple',
            }).classes('max-h-80').on('cellValueChanged', changeValues).on('cellClicked', Data.setRow)

        
async def read_loop(ser) -> None:
    while not app.is_stopped:
        try:
            line = await run.io_bound(ser.readline)
            if line:
                line = line.replace(b'\x03', b'').replace(b'\x02', b'').replace(b'\x8b', b'')
                line = RFID.decode_fdxb_ascii_string(line.decode("latin-1"))
                logger.info(str(datetime.now()) + " : " +"Tag erkannt: " + line)
                dataQueue.put(line)
        except:
            logger.error(str(datetime.now()) + " : " + "Keinen seriellen Port gefunden")
            ser = def_serialport()
            await asyncio.sleep(5)
            

# UI-Updater
def update_ui():
    while not dataQueue.empty():
        data = dataQueue.get()
        tag = (loadItem(data))
        timestamp = datetime.now()
        logToDb(tag["id"] if tag["id"] else data, tag["name"], timestamp.strftime("%d.%m.%Y %H:%M:%S"))
        loggingGrid.options['rowData'] = loadLogging()
        loggingGrid.options['sortModel'] = [{'colId': 'timestamp', 'sort': 'desc'}]
        loggingGrid.update()
        if tag["sendActive"] == True:
            logger.info(str(datetime.now()) + " : " +"Mail wird versendet")
            MailSettings.sendMail(tag['mailto'], timestamp.strftime("%d.%m.%Y %H:%M:%S"), tag["id"], tag["name"])

MailSettings.getMailConfig()
# Wiederholter Aufruf zur UI-Aktualisierung
ui.timer(0.5, update_ui)

# Start des Hintergrundthreads
app.on_startup(read_loop(ser))

app.on_connect(loadConfig)
app.on_connect(loadMailConfig)

if __name__ in {'__main__', '__mp_main__'}:
    ui.run(title='Animal Tracker', reload=True, show=False, storage_secret='FASNi023ufb0g9apbsz#+q')
